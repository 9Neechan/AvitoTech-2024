// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: banners.sql

package database

import (
	"context"
	"encoding/json"
	"time"
)

const createBanner = `-- name: CreateBanner :one
INSERT INTO banners (feature, tag, json_content, is_active, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING feature, tag, json_content, is_active, created_at, updated_at
`

type CreateBannerParams struct {
	Feature     int32
	Tag         int32
	JsonContent json.RawMessage
	IsActive    bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateBanner(ctx context.Context, arg CreateBannerParams) (Banner, error) {
	row := q.db.QueryRowContext(ctx, createBanner,
		arg.Feature,
		arg.Tag,
		arg.JsonContent,
		arg.IsActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Banner
	err := row.Scan(
		&i.Feature,
		&i.Tag,
		&i.JsonContent,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBanner = `-- name: DeleteBanner :one
DELETE FROM banners
WHERE feature = $1 AND tag = $2
RETURNING feature, tag, json_content, is_active, created_at, updated_at
`

type DeleteBannerParams struct {
	Feature int32
	Tag     int32
}

func (q *Queries) DeleteBanner(ctx context.Context, arg DeleteBannerParams) (Banner, error) {
	row := q.db.QueryRowContext(ctx, deleteBanner, arg.Feature, arg.Tag)
	var i Banner
	err := row.Scan(
		&i.Feature,
		&i.Tag,
		&i.JsonContent,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllBannersByFeature = `-- name: GetAllBannersByFeature :many
SELECT feature, tag, json_content, is_active, created_at, updated_at FROM banners WHERE feature = $1
`

func (q *Queries) GetAllBannersByFeature(ctx context.Context, feature int32) ([]Banner, error) {
	rows, err := q.db.QueryContext(ctx, getAllBannersByFeature, feature)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Banner
	for rows.Next() {
		var i Banner
		if err := rows.Scan(
			&i.Feature,
			&i.Tag,
			&i.JsonContent,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBannersByTag = `-- name: GetAllBannersByTag :many
SELECT feature, tag, json_content, is_active, created_at, updated_at FROM banners WHERE tag = $1
`

func (q *Queries) GetAllBannersByTag(ctx context.Context, tag int32) ([]Banner, error) {
	rows, err := q.db.QueryContext(ctx, getAllBannersByTag, tag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Banner
	for rows.Next() {
		var i Banner
		if err := rows.Scan(
			&i.Feature,
			&i.Tag,
			&i.JsonContent,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBanner = `-- name: GetUserBanner :one
SELECT feature, tag, json_content, is_active, created_at, updated_at FROM banners WHERE feature = $1 AND tag = $2
`

type GetUserBannerParams struct {
	Feature int32
	Tag     int32
}

func (q *Queries) GetUserBanner(ctx context.Context, arg GetUserBannerParams) (Banner, error) {
	row := q.db.QueryRowContext(ctx, getUserBanner, arg.Feature, arg.Tag)
	var i Banner
	err := row.Scan(
		&i.Feature,
		&i.Tag,
		&i.JsonContent,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBanner = `-- name: UpdateBanner :one
UPDATE banners
SET json_content = $1, is_active = $2, updated_at = NOW()
WHERE feature = $3 AND tag = $3
RETURNING feature, tag, json_content, is_active, created_at, updated_at
`

type UpdateBannerParams struct {
	JsonContent json.RawMessage
	IsActive    bool
	Feature     int32
}

func (q *Queries) UpdateBanner(ctx context.Context, arg UpdateBannerParams) (Banner, error) {
	row := q.db.QueryRowContext(ctx, updateBanner, arg.JsonContent, arg.IsActive, arg.Feature)
	var i Banner
	err := row.Scan(
		&i.Feature,
		&i.Tag,
		&i.JsonContent,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
